# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr, validator


class CreateMilestoneOption(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    description: Optional[StrictStr] = None
    due_on: Optional[datetime] = None
    state: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties = ["description", "due_on", "state", "title"]

    @validator("state")
    def state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ("open", "closed"):
            raise ValueError("must validate the enum values ('open', 'closed')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateMilestoneOption:
        """Create an instance of CreateMilestoneOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateMilestoneOption:
        """Create an instance of CreateMilestoneOption from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateMilestoneOption.parse_obj(obj)

        _obj = CreateMilestoneOption.parse_obj(
            {
                "description": obj.get("description"),
                "due_on": obj.get("due_on"),
                "state": obj.get("state"),
                "title": obj.get("title"),
            }
        )
        return _obj
