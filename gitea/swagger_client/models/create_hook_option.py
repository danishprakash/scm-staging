# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator


class CreateHookOption(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    active: Optional[StrictBool] = False
    branch_filter: Optional[StrictStr] = None
    config: Dict[str, StrictStr] = Field(
        ...,
        description='CreateHookOptionConfig has all config options in it required are "content_type" and "url" Required',
    )
    events: Optional[conlist(StrictStr)] = None
    type: StrictStr = ...
    __properties = ["active", "branch_filter", "config", "events", "type"]

    @validator("type")
    def type_validate_enum(cls, v):
        if v not in (
            "dingtalk",
            "discord",
            "gitea",
            "gogs",
            "msteams",
            "slack",
            "telegram",
            "feishu",
            "wechatwork",
            "packagist",
        ):
            raise ValueError(
                "must validate the enum values ('dingtalk', 'discord', 'gitea', 'gogs', 'msteams', 'slack', 'telegram', 'feishu', 'wechatwork', 'packagist')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateHookOption:
        """Create an instance of CreateHookOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateHookOption:
        """Create an instance of CreateHookOption from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateHookOption.parse_obj(obj)

        _obj = CreateHookOption.parse_obj(
            {
                "active": obj.get("active") if obj.get("active") is not None else False,
                "branch_filter": obj.get("branch_filter"),
                "config": obj.get("config"),
                "events": obj.get("events"),
                "type": obj.get("type"),
            }
        )
        return _obj
