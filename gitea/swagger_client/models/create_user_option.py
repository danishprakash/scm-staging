# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.3
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr


class CreateUserOption(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    email: StrictStr = ...
    full_name: Optional[StrictStr] = None
    login_name: Optional[StrictStr] = None
    must_change_password: Optional[StrictBool] = None
    password: StrictStr = ...
    restricted: Optional[StrictBool] = None
    send_notify: Optional[StrictBool] = None
    source_id: Optional[StrictInt] = None
    username: StrictStr = ...
    visibility: Optional[StrictStr] = None
    __properties = [
        "email",
        "full_name",
        "login_name",
        "must_change_password",
        "password",
        "restricted",
        "send_notify",
        "source_id",
        "username",
        "visibility",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUserOption:
        """Create an instance of CreateUserOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUserOption:
        """Create an instance of CreateUserOption from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateUserOption.parse_obj(obj)

        _obj = CreateUserOption.parse_obj(
            {
                "email": obj.get("email"),
                "full_name": obj.get("full_name"),
                "login_name": obj.get("login_name"),
                "must_change_password": obj.get("must_change_password"),
                "password": obj.get("password"),
                "restricted": obj.get("restricted"),
                "send_notify": obj.get("send_notify"),
                "source_id": obj.get("source_id"),
                "username": obj.get("username"),
                "visibility": obj.get("visibility"),
            }
        )
        return _obj
